name: metapackage-tests

on:
  push:
    paths:
      - 'src/*meta*.f90'  # On push, only launch job if something has changed in the metapackages
      - 'src/fpm/*meta*.f90'
      - 'src/fpm/manifest/*meta*.f90'
      - 'src/ci/meta_tests.sh'
      - 'src/.github/workflows/meta.yml'
  pull_request:
  release:
    types: [published]

env:
  CI: "ON" # We can detect this in the build system and other vendors implement it
  HOMEBREW_NO_ANALYTICS: "ON" # Make Homebrew installation a little quicker
  HOMEBREW_NO_AUTO_UPDATE: "ON"
  HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
  HOMEBREW_NO_GITHUB_API: "ON"
  HOMEBREW_NO_INSTALL_CLEANUP: "ON"
  GCC_V: "10"

jobs:

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          #          - os: ubuntu-latest
            #            mpi: intel
              #          - os: ubuntu-latest
            #            mpi: openmpi
              #          - os: ubuntu-latest
            #            mpi: mpich
              #          - #os: windows-latest 
            #            mpi: msmpi
          - os: macos-latest
            mpi: openmpi

    steps:
    - name: Checkout code
      uses: actions/checkout@v1

    - uses: msys2/setup-msys2@v2
      if: contains(matrix.os,'windows')
      with:
        msystem: MINGW64
        update: true
        install: >-
          git
          base-devel
          wget
          unzip
          curl
          gcc-fortran

    - name: (Ubuntu) Install gfortran
      if: contains(matrix.os,'ubuntu') && (!contains(matrix.mpi,'intel'))
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V} \
        --slave /usr/bin/gcov gcov /usr/bin/gcov-${GCC_V}

    - name: (Ubuntu) Install OpenMPI
      if: contains(matrix.os,'ubuntu') && contains(matrix.mpi,'openmpi')
      run: |
        sudo apt install -y -q openmpi-bin libopenmpi-dev

    - name: (Ubuntu) Install MPICH
      if: contains(matrix.os,'ubuntu') && contains(matrix.mpi,'mpich')
      run: |
        sudo apt install -y -q mpich

    - name: (Ubuntu) Retrieve Intel toolchain
      if: contains(matrix.os,'ubuntu') && contains(matrix.mpi,'intel')
      timeout-minutes: 1
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update

    - name: (Ubuntu) Install Intel oneAPI
      if: contains(matrix.os,'ubuntu') && contains(matrix.mpi,'intel')
      timeout-minutes: 5
      run: sudo apt-get install intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-mpi intel-oneapi-mpi-devel intel-oneapi-mkl ninja-build

    - name: (Ubuntu) Setup Intel oneAPI environment
      if: contains(matrix.os,'ubuntu') && contains(matrix.mpi,'intel')
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: (Windows) Put MSYS2_MinGW64 on PATH
      if: contains(matrix.os,'windows')
      # there is not yet an environment variable for this path from msys2/setup-msys2
      run: echo "${{ runner.temp }}/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: (Windows) download MS-MPI setup (SDK is from MSYS2)
      if: contains(matrix.os,'windows')
      run: curl -L -O https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisetup.exe

    - name: (Windows) Install mpiexec.exe (-force needed to bypass GUI on headless)
      if: contains(matrix.os,'windows')
      run: .\msmpisetup.exe -unattend -force

    - name: (Windows) test that mpiexec.exe exists
      if: contains(matrix.os,'windows')
      # can't use MSMPI_BIN as Actions doesn't update PATH from msmpisetup.exe
      run: Test-Path "C:\Program Files\Microsoft MPI\Bin\mpiexec.exe" -PathType leaf

    - name: (Windows) put MSMPI_BIN on PATH (where mpiexec is)
      if: contains(matrix.os,'windows')
      run: echo "C:\Program Files\Microsoft MPI\Bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: (Windows) Install MSYS2 msmpi package
      if: contains(matrix.os,'windows')
      shell: msys2 {0}
      run: pacman --noconfirm -S mingw-w64-x86_64-msmpi

    - name: (macOS) Set up Homebrew
      if: contains(matrix.os,'macos')
      id: set-up-homebrew
      uses: Homebrew/actions/setup-homebrew@master

    - name: (macOS) Install Homebrew gfortran
      if: contains(matrix.os, 'macos')
      run: |
        brew install gcc@${{ env.GCC_V }}
        ln -s /usr/local/bin/gfortran-${{ env.GCC_V }} /usr/local/bin/gfortran
        which gfortran-${{ env.GCC_V }}
        which gfortran

    - name: (macOS) Install homebrew MPICH
      if: contains(matrix.mpi,'mpich') && contains(matrix.os,'macos')
      run: |
        brew install mpich

    - name: (macOS) Install homebrew OpenMPI
      if: contains(matrix.mpi,'openmpi') && contains(matrix.os,'macos')
      run: |
        brew install --cc=gcc-${{ env.GCC_V}} openmpi

    # Phase 1: Bootstrap fpm with existing version
    - name: Install fpm
      uses: fortran-lang/setup-fpm@v3
      with:
        fpm-version: 'v0.8.0'

    - name: Remove fpm from path
      shell: bash
      run: |
        mv $(which fpm) fpm-bootstrap${{ matrix.exe }}
        echo "BOOTSTRAP=$PWD/fpm-bootstrap" >> $GITHUB_ENV

    - name: Build Fortran fpm (bootstrap)
      shell: bash
      run: |
        ${{ env.BOOTSTRAP }} build

    - name: Run Fortran fpm (bootstrap)
      shell: bash
      run: |
        ${{ env.BOOTSTRAP }} run
        ${{ env.BOOTSTRAP }} run -- --version
        ${{ env.BOOTSTRAP }} run -- --help

    - name: Test Fortran fpm (bootstrap)
      shell: bash
      run: |
        ${{ env.BOOTSTRAP }} test

    - name: Install Fortran fpm (bootstrap)
      shell: bash
      run: |
        ${{ env.BOOTSTRAP }} install

    # Phase 2: Bootstrap fpm with itself
    - name: Replace bootstrapping version
      shell: bash
      run: |
        ${{ env.BOOTSTRAP }} run --runner cp -- fpm-debug${{ matrix.exe }}
        rm -v ${{ env.BOOTSTRAP }}
        echo "FPM=$PWD/fpm-debug" >> $GITHUB_ENV

    - name: Get version (normal)
      if: github.event_name != 'release'
      shell: bash
      run: |
        VERSION=$(git rev-parse --short HEAD)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Get version (release)
      if: github.event_name == 'release'
      shell: bash
      run: |
        VERSION=$(echo ${{ github.ref }} | cut -dv -f2)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        FPM_VERSION=$(${{ env.FPM }} --version | grep -o '${{ env.REGEX }}')
        [ "$VERSION" = "$FPM_VERSION" ]
      env:
        REGEX: '[0-9]\{1,4\}\.[0-9]\{1,4\}\.[0-9]\{1,4\}'

    - name: Build Fortran fpm
      shell: bash
      run: |
        ${{ env.FPM }} build ${{ matrix.release-flags }}

    - name: Run Fortran fpm
      shell: bash
      run: |
        ${{ env.FPM }} run ${{ matrix.release-flags }}
        ${{ env.FPM }} run ${{ matrix.release-flags }} -- --version
        ${{ env.FPM }} run ${{ matrix.release-flags }} -- --help

    - name: Install Fortran fpm
      shell: bash
      run: |
        ${{ env.FPM }} install ${{ matrix.release-flags }}

    - name: Package release version
      shell: bash
      run: |
        ${{ env.FPM }} run ${{ matrix.release-flags }} --runner cp -- ${{ env.EXE }}
        rm -v ${{ env.FPM }}
        echo "FPM_RELEASE=${{ env.EXE }}" >> $GITHUB_ENV
      env:
        EXE: fpm-${{ env.VERSION }}-${{ matrix.os-arch }}${{ matrix.exe }}

    - name: (Ubuntu) Use Intel compiler for the metapackage tests
      if: contains(matrix.os,'ubuntu') && contains(matrix.mpi,'intel')
      shell: bash
      run: |
        echo "FPM_FC=ifort" >> $GITHUB_ENV
        echo "FPM_CC=icc" >> $GITHUB_ENV
        echo "FPM_CXX=icpc" >> $GITHUB_ENV

    - name: Run metapackage tests using the release version
      shell: bash
      run: |
        ci/meta_tests.sh "$PWD/${{ env.FPM_RELEASE }}"

