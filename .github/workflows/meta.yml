name: metapackage-tests

on:
  push:
  pull_request:
  release:
    types: [published]

env:
  CI: "ON" # We can detect this in the build system and other vendors implement it
  HOMEBREW_NO_ANALYTICS: "ON" # Make Homebrew installation a little quicker
  HOMEBREW_NO_AUTO_UPDATE: "ON"
  HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
  HOMEBREW_NO_GITHUB_API: "ON"
  HOMEBREW_NO_INSTALL_CLEANUP: "ON"

jobs:

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11,windows-latest]  
        mpi: [mpich,openmpi,msmpi] 
        gcc_v: [10] # Version of GFortran we want to use 
        exclude:
        - os: macos-11
          mpi: msmpi
        - os: windows-latest
          mpi: mpich
        - os: windows-latest
          mpi: openmpi
        include:
        - os: macos-11
          os-arch: macos-x86_64
          release-flags: --flag '-g -fbacktrace -O3'
        - os: windows-latest
          os-arch: windows-x86_64
          release-flags: --flag '--static -g -fbacktrace -O3'
          exe: .exe

    env:
      FC: gfortran
      GCC_V: ${{ matrix.gcc_v }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v1

    - uses: msys2/setup-msys2@v2
      if: contains(matrix.os,'windows')
      with:
        msystem: MINGW64 
        update: true
        install: >-
          git
          base-devel
          wget
          unzip
          curl
          gcc-fortran
          msmpi

    - name: Put MSYS2_MinGW64 on PATH
      if: contains(matrix.os,'windows')
      # there is not yet an environment variable for this path from msys2/setup-msys2
      run: echo "${{ runner.temp }}/msys64/mingw64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: download MS-MPI setup (SDK is from MSYS2)
      if: contains(matrix.os,'windows')
      run: curl -L -O https://github.com/microsoft/Microsoft-MPI/releases/download/v10.1.1/msmpisetup.exe

    - name: Install mpiexec.exe (-force needed to bypass GUI on headless)
      if: contains(matrix.os,'windows')
      run: .\msmpisetup.exe -unattend -force

    - name: test that mpiexec.exe exists
      if: contains(matrix.os,'windows')
      # can't use MSMPI_BIN as Actions doesn't update PATH from msmpisetup.exe
      run: Test-Path "C:\Program Files\Microsoft MPI\Bin\mpiexec.exe" -PathType leaf

    - name: put MSMPI_BIN on PATH (where mpiexec is)
      if: contains(matrix.os,'windows')
      run: echo "C:\Program Files\Microsoft MPI\Bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Set up Homebrew
      if: contains(matrix.os,'macos')
      id: set-up-homebrew
      uses: Homebrew/actions/setup-homebrew@master        

    - name: Install Homebrew gfortran
      if: contains(matrix.os, 'macos')
      run: |
        brew install gcc@${GCC_V}
        ln -s /usr/local/bin/gfortran-${GCC_V} /usr/local/bin/gfortran
        which gfortran-${GCC_V}
        which gfortran
    
    - name: Install homebrew MPICH
      if: contains(matrix.mpi,'mpich') && contains(matrix.os,'macos')
      run: |
        brew install mpich

    - name: Install homebrew OpenMPI
      if: contains(matrix.mpi,'openmpi') && contains(matrix.os,'macos')
      run: |
        brew install --cc=gcc-${GCC_V} openmpi

    - name: Install MSYS2 MSMPI
      if: contains(matrix.mpi,'msmpi') && contains(matrix.os,'windows')
      run: | 

    # Phase 1: Bootstrap fpm with existing version
    - name: Install fpm
      uses: fortran-lang/setup-fpm@v3
      with:
        fpm-version: 'v0.8.0'

    - name: Remove fpm from path
      shell: bash
      run: |
        mv $(which fpm) fpm-bootstrap${{ matrix.exe }}
        echo "BOOTSTRAP=$PWD/fpm-bootstrap" >> $GITHUB_ENV

    - name: Build Fortran fpm (bootstrap)
      shell: bash
      run: |
        ${{ env.BOOTSTRAP }} build 

    - name: Run Fortran fpm (bootstrap)
      shell: bash
      run: |
        ${{ env.BOOTSTRAP }} run
        ${{ env.BOOTSTRAP }} run -- --version
        ${{ env.BOOTSTRAP }} run -- --help

    - name: Test Fortran fpm (bootstrap)
      shell: bash
      run: |
        ${{ env.BOOTSTRAP }} test

    - name: Install Fortran fpm (bootstrap)
      shell: bash
      run: |
        ${{ env.BOOTSTRAP }} install

    # Phase 2: Bootstrap fpm with itself
    - name: Replace bootstrapping version
      shell: bash
      run: |
        ${{ env.BOOTSTRAP }} run --runner cp -- fpm-debug${{ matrix.exe }}
        rm -v ${{ env.BOOTSTRAP }}
        echo "FPM=$PWD/fpm-debug" >> $GITHUB_ENV

    - name: Get version (normal)
      if: github.event_name != 'release'
      shell: bash
      run: |
        VERSION=$(git rev-parse --short HEAD)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Get version (release)
      if: github.event_name == 'release'
      shell: bash
      run: |
        VERSION=$(echo ${{ github.ref }} | cut -dv -f2)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        FPM_VERSION=$(${{ env.FPM }} --version | grep -o '${{ env.REGEX }}')
        [ "$VERSION" = "$FPM_VERSION" ]
      env:
        REGEX: '[0-9]\{1,4\}\.[0-9]\{1,4\}\.[0-9]\{1,4\}'

    - name: Build Fortran fpm
      shell: bash
      run: |
        ${{ env.FPM }} build ${{ matrix.release-flags }}

    - name: Run Fortran fpm
      shell: bash
      run: |
        ${{ env.FPM }} run ${{ matrix.release-flags }}
        ${{ env.FPM }} run ${{ matrix.release-flags }} -- --version
        ${{ env.FPM }} run ${{ matrix.release-flags }} -- --help

    - name: Install Fortran fpm
      shell: bash
      run: |
        ${{ env.FPM }} install ${{ matrix.release-flags }}

    - name: Package release version
      shell: bash
      run: |
        ${{ env.FPM }} run ${{ matrix.release-flags }} --runner cp -- ${{ env.EXE }}
        rm -v ${{ env.FPM }}
        echo "FPM_RELEASE=${{ env.EXE }}" >> $GITHUB_ENV
      env:
        EXE: fpm-${{ env.VERSION }}-${{ matrix.os-arch }}${{ matrix.exe }}

    - name: Run metapackage tests using the release version 
      shell: bash
      run: |
        ci/meta_tests.sh "$PWD/${{ env.FPM_RELEASE }}"

