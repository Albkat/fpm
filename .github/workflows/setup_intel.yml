name: Setup Intel Environment

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string

jobs:
  setup:
    runs-on: ${{ inputs.os }}
    steps:
      - name: (Windows) Setup VS Build environment
        if: contains(inputs.os, 'windows')
        uses: seanmiddleditch/gha-setup-vsdevenv@master

      - name: (Windows) Retrieve Intel toolchain
        if: contains(inputs.os, 'windows')
        shell: pwsh
        working-directory: C:\TEMP
        run: |
          New-Item -ItemType Directory -Force -Path C:\TEMP
          curl.exe --output webimage.exe --url https://registrationcenter-download.intel.com/akdlm/irc_nas/19085/w_HPCKit_p_2023.0.0.25931_offline.exe --retry 5 --retry-delay 5
          Start-Process -FilePath "webimage.exe" -ArgumentList "-s -x -f oneAPI --log extract.log" -Wait
          Remove-Item "webimage.exe" -Force
          Start-Process -FilePath "oneAPI\bootstrapper.exe" -ArgumentList "-s --action install --eula=accept --components=""intel.oneapi.win.cpp-compiler:intel.oneapi.win.ifort-compiler:intel.oneapi.win.mpi.devel"" -p=NEED_VS2017_INTEGRATION=0 -p=NEED_VS2019_INTEGRATION=0 -p=NEED_VS2022_INTEGRATION=0 --log-dir=." -Wait
          Remove-Item "oneAPI" -Force -Recurse

      - name: (Windows) test that OneAPI is installed
        if: contains(inputs.os, 'windows')
        run: |
          Test-Path -Path "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" -PathType leaf
          Test-Path -Path "C:\Program Files (x86)\Intel\oneAPI\compiler\latest\env\vars.bat" -PathType leaf

      - name: (Windows) load OneAPI environment variables
        if: contains(inputs.os, 'windows')
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Intel\oneAPI\setvars.bat"
          call "C:\Program Files (x86)\Intel\oneAPI\compiler\latest\env\vars.bat"
          echo "PATH=%PATH%" >> %GITHUB_ENV%
          echo "INCLUDE=%INCLUDE%" >> %GITHUB_ENV%
          echo "LIB=%LIB%" >> %GITHUB_ENV%
          # Add any other specific vars if needed, e.g., for MPI
          echo "I_MPI_ROOT=%I_MPI_ROOT%" >> %GITHUB_ENV%

      # --- Ubuntu Intel Setup ---
      - name: (Ubuntu) Retrieve Intel toolchain repo info
        if: contains(inputs.os, 'ubuntu')
        run: |
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update

      - name: (Ubuntu) Install Intel oneAPI Compilers and MPI
        if: contains(inputs.os, 'ubuntu')
        # Using the fortran-lang action simplifies compiler setup
        uses: fortran-lang/setup-fortran@v1.6.1
        with:
          compiler: intel
          version: 2024.1.0 # Specify the version you need

      - name: (Ubuntu) Install Intel oneAPI MPI and dependencies, setup environment
        if: contains(inputs.os, 'ubuntu')
        run: |
          # Install MPI devel package and build tools needed for HDF5/NetCDF
          sudo apt-get install -y -q intel-oneapi-mpi-devel ninja-build cmake libcurl4-gnutls-dev

          # Source environment and export to GITHUB_ENV for subsequent steps in the calling workflow
          source /opt/intel/oneapi/setvars.sh --force
          printenv >> $GITHUB_ENV
